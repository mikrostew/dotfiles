#!/usr/bin/env bash
# $DOTFILES_DIR/.bash_git: git aliases and functions, sourced from .bashrc

source "$DOTFILES_DIR/.bash_colors"
source "$DOTFILES_DIR/.bash_shared_functions"


# shared functions

in_git_repo() {
  # @uses_funcs echo_err
  # @uses_cmds git
  git status >/dev/null && return 0 || echo_err "Not in git repo" && return 1
}

# for LinkedIn workflow
git_review_board_id() {
  # @uses_cmds git
  echo "$(git config --get branch.$1.reviewid)"
}

current_git_branch() {
  # @uses_cmds git
  echo "$(git rev-parse --abbrev-ref HEAD)"
}

on_git_branch() {
  # @uses_funcs current_git_branch,echo_err
  [ "$(current_git_branch)" != "$1" ] && echo_err ">_<  Must be on branch '$1' for this" && return -1 || return 0
}

not_on_git_branch() {
  # @uses_funcs current_git_branch,echo_err
  [ "$(current_git_branch)" == "$1" ] && echo_err ">_<  Doesn't work on branch '$1'" && return -1 || return 0
}

# check that repo is currently on a branch (not a tag or detached or anything else)
on_symbolic_ref() {
  # @uses_cmds git
  git symbolic-ref HEAD
}

no_uncommitted_changes() {
  # @uses_funcs echo_err
  # @uses_cmds git
  [ "$(git status --porcelain --untracked-files=no)" != "" ] && echo_err ">_<  You have uncommitted changes" && return -1 || return 0
}

# number of changes between two input branches
# (typically a branch and master, or master and origin/master)
commit_diff_on_branch() {
  # @uses_cmds git
  local git_rev_list_origin="$(git rev-list --count --left-right "$1"..."$2" 2>/dev/null)"
  if [ "$?" -eq 0 ] && [ -n "$git_rev_list_origin" ]; then
    local git_origin_arr=($git_rev_list_origin) # splits into array - it's 2 numbers separated by spaces
    echo "${git_origin_arr[0]}"
  else
    echo "0"
  fi
}

# files changed on the current branch
file_diff_on_branch() {
  # @uses_funcs based_on_master_or_origin
  # @uses_cmds git
  local tracking_branch="$(based_on_master_or_origin)"
  echo "$(git diff-tree --no-commit-id --name-only -r "$tracking_branch" HEAD)"
}

based_on_master_or_origin() {
  # @uses_cmds git
  # adapted from https://stackoverflow.com/a/9753364
  local tracking_branch="$(git rev-parse --abbrev-ref --symbolic-full-name $1@{u} 2>/dev/null)"
  if [ "$tracking_branch" == "origin/master" ]; then
    echo "origin/master"
  else
    echo "master"
  fi
}

# run git with the input arguments
do_git() {
  # @uses_funcs do_cmd
  # @uses_cmds git
  do_cmd git "$@"
}

# list all branches
all_git_branches() {
  # @uses_cmds git sed
  echo $(git for-each-ref --format="%(refname)" refs/heads/ | sed 's|refs/heads/||')
}

# undo the last merge that was done (usually because something failed)
git_undo_merge() {
  # @uses_funcs do_git
  do_git reset --merge ORIG_HEAD && do_git checkout "$1"
}

# this RB stuff should probably go in a separate file...

# get the API definition for review board at LinkedIn
get_li_rb_api_def() {
  # @uses_vars DOTFILES_DIR:s|$HOME|\$HOME|
  # @uses_funcs echo_err,echo_info
  # @uses_cmds find curl
  local api_def=""
  local cache_file="$DOTFILES_DIR/cache/li-rb-api-def.cache"
  local cache_file_expired="$(find $cache_file -mtime +1)" # if cache file is older than 1 day

  if [ -n "$cache_file_expired" ]
  then
    echo_info "RB API definitions not cached, requesting..."
    api_def="$(curl -X GET -H 'Accept: application/json' 'https://rb.corp.linkedin.com/api/' 2>/dev/null)"
    exit_code="$?"
    if [ "$exit_code" -ne 0 ]
    then
      echo_err "Failed to get RB API definitions. Exit code was: $exit_code"
    else
      echo "$api_def" > "$cache_file"
    fi
  else
    api_def=$(<"$cache_file")
  fi
  echo "$api_def"
}

# get the template to use for querying the RB api
get_li_rb_uri_template() {
  # @uses_funcs get_li_rb_api_def
  # @uses_cmds jq
  template="$(get_li_rb_api_def | jq --raw-output ".uri_templates.$1")"
  echo "$template"
}

# get RB status
get_li_rb_status() {
  # @uses_funcs get_li_rb_uri_template
  # @uses_cmds jq curl
  if [ -n "$1" ]; then
    api_uri_template=$(get_li_rb_uri_template "review_request")
    # echo $api_uri_template
    request_url=${api_uri_template/\{review_request_id\}/$1}
    # echo $request_url
    if [ -n "$request_url" ]; then
      status=$(curl -X GET -H 'Accept: application/json' "$request_url" 2>/dev/null | jq --raw-output '.review_request.status')
      echo "$status"
    fi
  fi
}

# get RB title
# argument: review ID
get_li_rb_title() {
  # @uses_funcs get_li_rb_uri_template
  # @uses_cmds jq curl
  if [ -n "$1" ]; then
    api_uri_template=$(get_li_rb_uri_template "review_request")
    request_url=${api_uri_template/\{review_request_id\}/$1}
    if [ -n "$request_url" ]
    then
      summary=$(curl -X GET -H 'Accept: application/json' "$request_url" 2>/dev/null | jq --raw-output '.review_request.summary')
      echo "$summary"
    fi
  fi
}

# parse input repo URL, returning user and repo separated by a space
git_parse_repo_url() {
  repo_url="$1"
  if [[ "$repo_url" =~ ^git@ ]]
  then
    # example: git@github.com:octocat/Hello-World.git
    trim_front="${repo_url#git@github.com:}" # remove the initial "git@github.com:"
    trim_back="${trim_front%.git}" # remove the trailing ".git"
    echo "${trim_back/\// }" # replace the separating "/" with " "
  elif [[ "$repo_url" =~ ^https ]]
  then
    # example: https://github.com/octocat/Hello-World.git
    trim_front="${repo_url#https://github.com/}" # remove the initial "https://github.com/"
    trim_back="${trim_front%.git}" # remove the trailing ".git"
    echo "${trim_back/\// }" # replace the separating "/" with " "
  fi
}

# functions
# TODO: extract all of these to separate scripts

# git - apply a patch to a new branch, named after the input .patch file (from gbpatch)
gbapply() {
  arguments=('<patch-file>')
  if in_git_repo && on_git_branch 'master' && no_uncommitted_changes && num_arguments_ok arguments[@] "$#"
  then
    local patch_file="$1"
    local new_branch_name=$(basename "$patch_file")
    do_git checkout -b "${new_branch_name%.*}" && do_git apply --check "$patch_file" && do_git apply "$patch_file"
  fi
}

# git - list branches (git branch list)
gbl() {
  do_git branch --list
}

# git - list branches with RB and status (will be slow)
gbls() {
  for branch in $(all_git_branches); do
    local review_id=$(git config --get branch.$branch.reviewid)
    local review_status=$(get_li_rb_status $review_id)
    # to make things nicer to look at
    if [ "$review_status" == "submitted" ]; then
      review_status="$(echo -e "${COLOR_FG_DARK_GRAY}$review_status${COLOR_RESET}")"
    fi
    if [ "$review_status" == "pending" ]; then
      review_status="$(echo -e "${COLOR_FG_YELLOW}$review_status${COLOR_RESET}")"
    fi

    if [ -n "$review_id" ]; then
      printf "${COLOR_FG_BOLD_BLUE}%-25s${COLOR_RESET} https://rb.corp.linkedin.com/r/%-10s %s\n" $branch $review_id $review_status
    else
      printf "%-25s\n" $branch
    fi
  done
}

# git - list local and remote branches (git branch list all)
gbla() {
  do_git branch --list -a
}

# git - create a patch from the current branch (for use with gbapply)
gbpatch() {
  arguments=()
  if in_git_repo && not_on_git_branch 'master' && no_uncommitted_changes && num_arguments_ok arguments[@] "$#"
  then
    local branch_name=$(current_git_branch)
    local tracking_branch=$(based_on_master_or_origin)
    do_git format-patch $tracking_branch --stdout > "${branch_name}.patch"
  fi
}

# git - checkout branch/tag/hash (git checkout)
gc() {
  arguments=('<branch-tag-or-hash>')
  if in_git_repo && num_arguments_ok arguments[@] "$#"
  then
    do_git checkout "$1"
  fi
}

# git - create new branch
gcb() {
  arguments=( '<new-branch-name>' )
  if in_git_repo && num_arguments_ok arguments[@] "$#"
  then
    do_git checkout -b "$1"
  fi
}

# git - create new branch (that tracks origin/master)
gcbm() {
  arguments=( '<new-branch-name>' )
  if in_git_repo && num_arguments_ok arguments[@] "$#"
  then
    do_git checkout -b "$1" origin/master
  fi
}

# git - gui (git gui)
gg() {
  # use this in citool mode, to make a commit and exit
  # then show what was committed
  do_git gui citool && git log -n1 || echo "(no commit)"
}

# git - show commit log (input number of logs to show, default is 4)
gl() {
  num_logs="${1:-4}" # default to showing the last 4 logs
  do_git log -n$num_logs
}

# git - show commit log in one-line format (git log oneline)
glo() {
  do_git log --pretty=format:'%Cred%h%Creset - %Cgreen%ci%Creset %C(yellow)<%an>%Creset %s'
}

# git - show commit log in one-line format, no color (git log oneline nocolor)
glon() {
  do_git log --pretty=format:'%h - %ci <%an> %s'
}

# TODO support more than *.js files
# git - run linter on files changed on this branch (git lint changes)
glc() {
  local changed_files=$(file_diff_on_branch)
  # for eslint, have to have nvm loaded
  if [ -z "$NVM_BIN" ]; then load_nvm; fi

  echo "$changed_files" | xargs eslint --config ~/dotfiles/.eslintrc.json --plugin extra-rules --rule 'extra-rules/no-commented-out-code: warn'
}

# git - run mergetool for conflicts (git mergetool)
gmt() {
  # @uses_funcs do_git
  # TODO: different tool for Mac/Linux
  do_git mergetool --tool=opendiff
}

# git - apply diff from review board to repo (git review apply)
gra() {
  echo_err "TODO"
  # usage: git-review apply [-h] [-a] [-c {master,review,current}] [-d DIFF]
  #                         [-l LOCATION] [-n]
  #                         reviewid
  #
  # Given a reviewboard request clean up the repo and apply the diff locally
  #
  # positional arguments:
  #   reviewid              Review id to apply locally
  #
  # optional arguments:
  #   -h, --help            show this help message and exit
  #   -a, --commit          Commit the patch.
  #   -c {master,review,current}, --commitid {master,review,current}
  #                         Apply review diff to fresh checkout of the repo in the
  #                         review
  #   -d DIFF, --diff DIFF  Choose the diff to apply
  #   -l LOCATION, --location LOCATION
  #                         Choose destination directory.
  #   -n, --no-new-dir      Apply review diff to the current repo
}

# git - show ACLs needed for review, with optional RB_ID (git review dcommit)
grd() {
  if [ -n "$1" ]
  then
    do_git review dcommit -r "$1"
  else
    do_git review dcommit
  fi
}

# git - update remote tracking branch (git remote update)
gremu() {
  do_git remote update
}

# git - delete *.orig files, usually leftover after merge or rebase with conflicts
grmorig() {
  do_git ls-files --others --exclude-standard | do_cmd grep \.orig$ | do_cmd xargs rm -v
}

# git - show status of RB - which ACLs are needed (git review status)
grs() {
  do_git review status
}

# git - stash uncommitted changes (git stash)
gs() {
  do_git stash
}

# git - apply stashed changes (git stash apply [stash])
gsa() {
  if [ -n "$1" ]; then
    do_git stash apply "$1"
  else
    do_git stash apply
  fi
}

# git - dtop stashed changes (git stash drop [stash])
gsd() {
  if [ -n "$1" ]; then
    do_git stash drop "$1"
  else
    do_git stash drop
  fi
}

# git - list all stashes (git stash list)
gsl() {
  do_git stash list
}

# git - pop the last stash (git stash pop)
gsp() {
  do_git stash pop
}

# git - stash current changes with a message (git stash save)
gss() {
  arguments=('<message>')
  if in_git_repo && num_arguments_ok arguments[@] "$#"
  then
    do_git stash save "$1"
  fi
}

# git - show repo status (git status)
gstat() {
  do_git status
}

# git - (meta) show git functions from this file
gfun() {
  printf "\nFunctions:\n"
  # list of functions and descriptions
  git_functions=$(sed -n -e '/^# git/{ h; n; G; s/\n//; s/{# git - //; p; }' "$DOTFILES_DIR/.bash_git" | sort)
  while read -r func text; do
    printf "%10s - %s\n" "$func" "$text"
  done <<< "$git_functions"
}

# git - show which files are different from master branch
gfiles() {
  arguments=()
  if in_git_repo && not_on_git_branch 'master' && num_arguments_ok arguments[@] "$#"
  then
    local branch_name=$(current_git_branch)
    do_git diff --name-status master.."$branch_name"
  fi
}

# git - squash commits in current branch into a single commit (git squash branch)
gsqb() {
  arguments=( '<commit-message>' '[extra-line]' )
  if in_git_repo && not_on_git_branch 'master' && no_uncommitted_changes && num_arguments_min arguments[@] "$#"
  then
    squash-branch "$1" "$2"
  else
    return -1;
  fi
}

# git - branch move (rename current branch)
gbm() {
  arguments=( '<new-branch-name>' )
  if in_git_repo && num_arguments_ok arguments[@] "$#"
  then
    do_git branch --move "$1"
  fi
}

# release npm project
#  - update version in package.json
#  - commit with version in commit message
#  - publish to npm
release() {
  # (adapted from https://github.com/stefanpenner/dotfiles/blob/master/.config/fish/config.fish)
  if in_git_repo
  then
    tag="${1:?Must include a tag argument}"
    current_branch="$(current_git_branch)"

    # need to use npm
    if [ -z "$NVM_BIN" ]; then load_nvm; fi

    if [ -f package.json ]; then
      do_cmd jq ".version=\"$tag\"" < package.json | do_cmd sponge package.json
      do_git add ./package.json
    fi

    do_git commit -m "release v$tag 🎉"
    do_git tag "v$tag"
    do_git push origin "$current_branch" "v$tag"

    if [ -f package.json ]; then
      do_cmd npm publish
    fi

    echo_info "released as v$tag 🎉"
    echo -n "released as v$tag 🎉" | pbcopy
  fi
}

