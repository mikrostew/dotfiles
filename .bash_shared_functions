#!/usr/bin/env bash
# $DOTFILES_DIR/.bash_shared_functions: library of shared functions, sourced from multiple files

# colors
source "$DOTFILES_DIR/.bash_colors"

# echo to stderr with red text
echo_err() {
  # @uses_vars COLOR_FG_RED,COLOR_RESET
  echo -e "${COLOR_FG_RED}$@${COLOR_RESET}" >&2
}

# echo to stderr with green text
echo_ack() {
  # @uses_vars COLOR_FG_GREEN,COLOR_RESET
  echo -e "${COLOR_FG_GREEN}$@${COLOR_RESET}" >&2
}

# echo to stderr with blue text
echo_info() {
  # @uses_vars COLOR_FG_BOLD_BLUE,COLOR_RESET
  echo -e "${COLOR_FG_BOLD_BLUE}$@${COLOR_RESET}" >&2
}

# for deprecations
# echo to stderr with yellow text
echo_dep() {
  # @uses_vars COLOR_FG_BOLD_YELLOW,COLOR_RESET
  echo -e "${COLOR_FG_BOLD_YELLOW}[DEPRECATION] $@${COLOR_RESET}" >&2
}

# show a glaringly obvious banner for success or failure
echo_fail_banner() {
  # @uses_funcs echo_err
  echo_err "***************";
  echo_err "*  Failed :(  *";
  echo_err "***************";
}
echo_success_banner() {
  # @uses_funcs echo_ack
  echo_ack "****************";
  echo_ack "*  Success :)  *";
  echo_ack "****************";
}

# check for exact number of arguments to a function, and print usage if not correct
# argument(s)
# - array of expected argument names
# - number of arguments passed to function
num_arguments_ok() {
  # @uses_funcs echo_err
  local expected_args=( "${!1}" )
  local num_args="$2"
  local expected_num_args="${#expected_args[@]}"
  if [ "$expected_num_args" -ne "$num_args" ]
  then
    # $FUNCNAME is an array of the current call stack
    echo_err "Come on! This is how to use this:"
    echo_err ""
    echo_err "  ${FUNCNAME[1]} ${expected_args[*]}"
    return -1
  fi
  return 0
}

# check for minimum number of arguments to a function, and print usage if not correct
# argument(s)
# - array of expected argument names
# - number of arguments passed to function
# there may be a better way to handle this, but I'll wait until I want to start verifying arguments
num_arguments_min() {
  expected_args=( "${!1}" )
  num_args="$2"

  mandatory_args=()
  for arg in "${expected_args[@]}"
  do
    # if argument is not enclosed in [ ] it is mandatory
    if [[ "$arg" != [* ]]; then
      mandatory_args+=( "$arg" )
    fi
  done

  mandatory_num_args="${#mandatory_args[@]}"
  if [ "$num_args" -lt "$mandatory_num_args" ]
  then
    # $FUNCNAME is an array of the current call stack
    echo_err "Come on! This is how to use this:"
    echo_err ""
    echo_err "  ${FUNCNAME[1]} ${expected_args[*]}"
    return -1
  fi
  return 0
}

# check for required commands
requirement_check() {
  # @uses_funcs echo_err

  # arguments:
  local cmd="$1"
  local how_to_install="$2"

  if [ ! $(command -v $cmd) ]; then
    echo_err "[ERROR] Command '$cmd' is required for this script, but not installed"
    echo_err "To install: $how_to_install"
    return 1
  else
    return 0
  fi
}

# echo the input command and arguments in green, then run the command
# (for commands that change state)
do_cmd() {
  # @uses_vars COLOR_FG_GREEN,COLOR_RESET
  echo -en "${COLOR_FG_GREEN}( " >&2
  for arg in "$@"
  do
    # double quotes around any arguments that contain spaces
    # (adapted from https://stackoverflow.com/a/1474056/)
    case "$arg" in
      *\ * )
        echo -n "\"$arg\" "
        ;;
      *)
        echo -n "$arg "
        ;;
    esac
  done
  echo -e ")${COLOR_RESET}" >&2
  command "$@"
}

